<%-- 
Name:	IBatisNetGen.DaoImpl.cst
Version: 2007.02.08
Author: Yaojian  ( smrtk@hotmail.com )
Description: Generates the data access interface for IBatis.Net (see ibatis.apache.org)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="CSBatisBuilder.cs" Inherits="TableTemplate" Debug="true"  Description="Generates IBatis map and data class from a database table." %>

<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%--<%@ Assembly Src="CSBatisBuilder.cs" %>--%>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.ComponentModel" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="CSBatisBuilder" %>
<script runat="template">
	protected override FileOption GetDefaultFileOption() {
		return FileSetOption.CreateDefaultDaoImplOption();
	}
</script>
//==============================================================================
//	CAUTION: This file is generated by <% =CodeTemplateInfo.FileName %> at <% =CodeTemplateInfo.DateCreated %>
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections.Generic;
using System.Text;
using IBatisNet.DataMapper;
<%	if (Builder.EntityNamespace != Builder.DaoImplNamespace) { %>
using <% =Builder.EntityNamespace %>;
<%	} %>
<%	if (Builder.DaoIntfNamespace != Builder.DaoImplNamespace) { %>
using <% =Builder.DaoIntfNamespace %>;
<%	} %>
<%	if (Builder.DaoImplOption.Usings != null) {
		foreach (String s in Builder.DaoImplOption.Usings) { %>
using <% =s %>;
<%		} %>
<%	} %>

namespace <% =Builder.DaoImplNamespace %> {
	
    /// <summary><c><% =Builder.DaoImplName %></c> is the implementation of <see cref="<% =Builder.DaoIntfName %>"/>.</summary>
    public <% =Builder.DaoImplPartialDecl %>class <% =Builder.DaoImplName %><% =Builder.DaoImplBaseDecl %> {

<%	//GetCount
	if (Builder.DaoMethodSetOption.GetCountOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.GetCountMethod %>"/></summary>
		public int <% =Builder.GetCountMethod %>() {
			String stmtId = "<% =Builder.GetCountStmtId %>";
			int result = <% =Builder.SqlMapper %>.QueryForObject<int>(stmtId, null);
			return result;
		}

<%	} %>
<%	//Find
	if (Builder.DaoMethodSetOption.FindOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.FindMethod %>"/></summary>
		public <% =Builder.EntityName %> <% =Builder.FindMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>) {
			String stmtId = "<% =Builder.FindStmtId %>";
			<% =Builder.EntityName %> result = <% =Builder.SqlMapper %>.QueryForObject<<% =Builder.EntityName %>>(stmtId, <% =Builder.GetClrParamNames(Builder.PkColumns) %>);
			return result;
		}

<%	} //if %>
<%	//QuickFind
	if (Builder.HasLob && Builder.DaoMethodSetOption.FindNonLobOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.FindNonLobMethod %>"/></summary>
		public <% =Builder.EntityName %> <% =Builder.FindNonLobMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>) {
			String stmtId = "<% =Builder.FindNonLobStmtId %>";
			<% =Builder.EntityName %> result = <% =Builder.SqlMapper %>.QueryForObject<<% =Builder.EntityName %>>(stmtId, <% =Builder.GetClrParamNames(Builder.PkColumns) %>);
			return result;
		}
		
<%	} //if %>
<%	//FindAll
	if (Builder.DaoMethodSetOption.FindAllOption.GenerateIntf) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.FindAllMethod %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.FindAllMethod %>() {
			String stmtId = "<% =Builder.FindAllStmtId %>";
			IList<<% =Builder.EntityName %>> result = <% =Builder.SqlMapper %>.QueryForList<<% =Builder.EntityName %>>(stmtId, null);
			return result;
		}
		
<%	} //if %>
<%	//QuickFindAll
	if (Builder.DaoMethodSetOption.FindNonLobAllOption.GenerateIntf) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.FindNonLobAllMethod %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.FindNonLobAllMethod %>() {
			String stmtId = "<% =Builder.FindNonLobAllStmtId %>";
			IList<<% =Builder.EntityName %>> result = <% =Builder.SqlMapper %>.QueryForList<<% =Builder.EntityName %>>(stmtId, null);
			return result;
		}
		
<%	} //if %>
<%	//FindBy, QuickFindBy
	foreach (ColumnInfo c in Builder.FinderColumns) { 
		//FindBy
		if (Builder.DaoMethodSetOption.FindByOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.FindByMethod(c) %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.FindByMethod(c) %>(<% =c.ClrParamDecl %>) {
			String stmtId = "<% =Builder.FindByStmtId(c) %>";
			IList<<% =Builder.EntityName %>> result = <% =Builder.SqlMapper %>.QueryForList<<% =Builder.EntityName %>>(stmtId, <% =c.ClrParamName %>);
			return result;
		}
		
<%		} //if	%>
<%		//QuickFindBy
		if (Builder.HasLob && Builder.DaoMethodSetOption.FindNonLobByOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.FindNonLobByMethod(c) %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.FindNonLobByMethod(c) %>(<% =c.ClrParamDecl %>) {
			String stmtId = "<% =Builder.FindNonLobByStmtId(c) %>";
			IList<<% =Builder.EntityName %>> result = <% =Builder.SqlMapper %>.QueryForList<<% =Builder.EntityName %>>(stmtId, <% =c.ClrParamName %>);
			return result;
		}
		
<%		} //if	
	} //foreach %>
<%	//Insert
	if (Builder.DaoMethodSetOption.InsertOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.InsertMethod %>"/></summary>
		public <% =Builder.PkColumns[0].ClrTypeDecl%> <% =Builder.InsertMethod %>(<% =Builder.EntityName %> obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.InsertStmtId %>";
			return (<% =Builder.PkColumns[0].ClrTypeDecl%>)<% =Builder.SqlMapper %>.Insert(stmtId, obj);
		}
		
<%	} //if %>
<%	//Update
	if (Builder.DaoMethodSetOption.UpdateOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.UpdateMethod %>"/></summary>
		public int <% =Builder.UpdateMethod %>(<% =Builder.EntityName %> obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.UpdateStmtId %>";
			return <% =Builder.SqlMapper %>.Update(stmtId, obj);
		}
		
<%	} //if %>
<%	//Delete
	if (Builder.DaoMethodSetOption.DeleteOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.DeleteMethod %>"/></summary>
		public int <% =Builder.DeleteMethod %>(<% =Builder.EntityName %> obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.DeleteStmtId %>";
			return <% =Builder.SqlMapper %>.Delete(stmtId, obj);
		}
		
<%	} //if %>
<%  //DeleteBy
	if (Builder.DaoMethodSetOption.DeleteByOption.GenerateImpl) { %>
<%		foreach (ColumnInfo c in Builder.FinderColumns) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.DeleteByMethod(c) %>"/></summary>
		public int <% =Builder.DeleteByMethod(c) %>(<% =c.ClrParamDecl %>) {
			String stmtId = "<% =Builder.DeleteByStmtId(c) %>";
			int result = <% =Builder.SqlMapper %>.Delete(stmtId, <% =c.ClrParamName %>);
			return result;
		}
		
<%		} //foreach %>
<%	} //if %>
<%	//Reload
	if (Builder.DaoMethodSetOption.ReloadOption.GenerateImpl) { %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.ReloadMethod %>"/></summary>
		public void <% =Builder.ReloadMethod %>(<% =Builder.EntityName %> obj) {
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.FindStmtId %>";
			<% =Builder.SqlMapper %>.QueryForObject<<% =Builder.EntityName %>>(stmtId, obj, obj);
		}
		
<%	} //if %>
	}

}
