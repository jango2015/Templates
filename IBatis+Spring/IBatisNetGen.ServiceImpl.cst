<%-- 
Name:	IBatis.DaoImpl.cst
Version: 2007.02.08
Author: Jinwl  ( jinweile@163.com )
Description: Generates the data access interface for IBatis (see ibatis.apache.org)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="CSBatisBuilder.cs" Inherits="TableTemplate" Debug="true"  Description="Generates IBatis map and data class from a database table." %>

<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%--<%@ Assembly Src="CSBatisBuilder.cs" %--%>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.ComponentModel" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="CSBatisBuilder" %>
<script runat="template">
	protected override FileOption GetDefaultFileOption() {
		return FileSetOption.CreateDefaultServiceImplOption();
	}
</script>
package <% =Builder.ServiceImplNamespace %>;

import java.sql.SQLException;
import java.util.Map;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

import <% =Builder.DaoIntfNamespace %>.<% =Builder.DaoIntfName %>;

<%	if (Builder.EntityNamespace != Builder.DaoImplNamespace) { %>
import <% =Builder.EntityNamespace %>.<% =Builder.EntityName %>;
<%	} %>
<%	if (Builder.ServiceIntfNamespace != Builder.ServiceImplNamespace) { %>
import <% =Builder.ServiceIntfNamespace %>.<% =Builder.ServiceIntfName %>;
<%	} %>
<%	if (Builder.ServiceImplOption.Usings != null) {
		foreach (String s in Builder.ServiceImplOption.Usings) { %>
import <% =s %>.*;
<%		} %>
<%	} %>
	
/**
 *<% =Builder.ServiceImplName %> is the implementation of <% =Builder.ServiceIntfName %>
 */
public <% =Builder.ServiceImplPartialDecl %>class <% =Builder.ServiceImplName %><% =Builder.ServiceImplBaseDecl %> {
	
	private <% =Builder.DaoIntfName %> <% =Builder.Dao %> = null;
	
	/**
	 * dao interface
	 * @param <% =Builder.Dao %>
	 */
	public void set<% =Builder.DaoImplName %>(<% =Builder.DaoIntfName %> <% =Builder.Dao %>){
		this.<% =Builder.Dao %> = <% =Builder.Dao %>;
	}

<%	//GetCount
if (Builder.DaoMethodSetOption.GetCountOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.GetCountMethod %>
	 */
	public int <% =Builder.GetCountMethod %>() throws SQLException {
		int result = <% =Builder.Dao %>.<% =Builder.GetCountMethod %>();
		return result;
	}

<%	} %>
<%	//Find
if (Builder.DaoMethodSetOption.FindOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.FindMethod %>
	 */
	public <% =Builder.EntityName %> <% =Builder.FindMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>) throws SQLException {
		<% =Builder.EntityName %> result = <% =Builder.Dao %>.<% =Builder.FindMethod %>(<% =Builder.GetClrParamNames(Builder.PkColumns) %>);
		return result;
	}

<%	} //if %>
<%	//QuickFind
if (Builder.HasLob && Builder.DaoMethodSetOption.FindNonLobOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.FindNonLobMethod %>
	 */
	public <% =Builder.EntityName %> <% =Builder.FindNonLobMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>) throws SQLException {
		<% =Builder.EntityName %> result = <% =Builder.Dao %>.<% =Builder.FindNonLobMethod %>(<% =Builder.GetClrParamNames(Builder.PkColumns) %>);
		return result;
	}
	
<%	} //if %>
<%	//FindAll
if (Builder.DaoMethodSetOption.FindAllOption.GenerateIntf) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.FindAllMethod %>
	 */
	public List<<% =Builder.EntityName %>> <% =Builder.FindAllMethod %>() throws SQLException {
		List<<% =Builder.EntityName %>> result = <% =Builder.Dao %>.<% =Builder.FindAllMethod %>();
		return result;
	}
	
<%	} //if %>
<%	//QuickFindAll
if (Builder.DaoMethodSetOption.FindNonLobAllOption.GenerateIntf) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.FindNonLobAllMethod %>
	 */
	public List<<% =Builder.EntityName %>> <% =Builder.FindNonLobAllMethod %>() throws SQLException {
		List<<% =Builder.EntityName %>> result = <% =Builder.Dao %>.<% =Builder.FindNonLobAllMethod %>();
		return result;
	}
	
<%	} //if %>
<%	//FindBy, QuickFindBy
foreach (ColumnInfo c in Builder.FinderColumns) { 
	//FindBy
	if (Builder.DaoMethodSetOption.FindByOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.FindByMethod(c) %>
	 */
	public List<<% =Builder.EntityName %>> <% =Builder.FindByMethod(c) %>(<% =c.ClrParamDecl %>) throws SQLException {
		List<<% =Builder.EntityName %>> result = <% =Builder.Dao %>.<% =Builder.FindByMethod(c) %>(<% =c.ClrParamName %>);
		return result;
	}
	
<%		} //if	%>
<%	//QuickFindBy
	if (Builder.HasLob && Builder.DaoMethodSetOption.FindNonLobByOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.FindNonLobByMethod(c) %>
	 */
	public List<<% =Builder.EntityName %>> <% =Builder.FindNonLobByMethod(c) %>(<% =c.ClrParamDecl %>) throws SQLException {
		List<<% =Builder.EntityName %>> result = <% =Builder.Dao %>.<% =Builder.FindNonLobByMethod(c) %>(<% =c.ClrParamName %>);
		return result;
	}
	
<%		} //if	
} //foreach %>
<%	//Insert
if (Builder.DaoMethodSetOption.InsertOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.InsertMethod %>
	 */
	public <% =Builder.PkColumns[0].ClrTypeDecl%> <% =Builder.InsertMethod %>(<% =Builder.EntityName %> obj) throws SQLException {
		if (obj == null) throw new NullPointerException("obj");
		return <% =Builder.Dao %>.<% =Builder.InsertMethod %>(obj);
	}
	
<%	} //if %>
<%	//Update
if (Builder.DaoMethodSetOption.UpdateOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.UpdateMethod %>
	 */
	public int <% =Builder.UpdateMethod %>(<% =Builder.EntityName %> obj) throws SQLException {
		if (obj == null) throw new NullPointerException("obj");
		return <% =Builder.Dao %>.<% =Builder.UpdateMethod %>(obj);
	}
	
<%	} //if %>
<%	//Delete
if (Builder.DaoMethodSetOption.DeleteOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.DeleteMethod %>
	 */
	public int <% =Builder.DeleteMethod %>(<% =Builder.EntityName %> obj) throws SQLException {
		if (obj == null) throw new NullPointerException("obj");
		return <% =Builder.Dao %>.<% =Builder.DeleteMethod %>(obj);
	}
	
<%	} //if %>
<%  //DeleteBy
if (Builder.DaoMethodSetOption.DeleteByOption.GenerateImpl) { %>
<%		foreach (ColumnInfo c in Builder.FinderColumns) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.DeleteByMethod(c) %>
	 */
	public int <% =Builder.DeleteByMethod(c) %>(<% =c.ClrParamDecl %>) throws SQLException {
		int result = <% =Builder.Dao %>.<% =Builder.DeleteByMethod(c) %>(<% =c.ClrParamName %>);
		return result;
	}
	
<%		} //foreach %>
<%	} //if %>
<%	//Reload
if (Builder.DaoMethodSetOption.ReloadOption.GenerateImpl) { %>
	/**
	 *Implements <% =Builder.ServiceIntfName %>.<% =Builder.ReloadMethod %>
	 */
	public void <% =Builder.ReloadMethod %>(<% =Builder.EntityName %> obj) throws SQLException {
		if (obj == null) throw new NullPointerException("obj");
		<% =Builder.Dao %>.<% =Builder.ReloadMethod %>(obj);
	}
	
<%	} //if %>
}
