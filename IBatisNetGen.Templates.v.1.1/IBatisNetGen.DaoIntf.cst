<%-- 
Name:	IBatisNetGen.DaoIntf.cst
Version: 2007.02.08
Author: Yaojian  ( smrtk@hotmail.com )
Description: Generates the data access interface for IBatis.Net (see ibatis.apache.org)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="CSBatisBuilder.cs" Inherits="TableTemplate" Debug="true"  Description="Generates IBatis map and data class from a database table." %>

<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.ComponentModel" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="CSBatisBuilder" %>
<script runat="template">
	protected override FileOption GetDefaultFileOption() {
		return FileSetOption.CreateDefaultDaoIntfOption();
	}
</script>
//==============================================================================
//	CAUTION: This file is generated by <% =CodeTemplateInfo.FileName %> at <% =CodeTemplateInfo.DateCreated %>
//				Any manual editing will be lost in re-generation.
//==============================================================================
using System;
using System.Collections;
using System.Collections.Generic;

<%	if (Builder.DaoIntfOption.Usings != null) {
		foreach (String s in Builder.DaoIntfOption.Usings) { %>
using <% =s %>;
<%		} %>
<%	} %>
<%	if (Builder.EntityNamespace != Builder.DaoIntfNamespace) { %>
using <% =Builder.EntityNamespace %>;
<%	} %>

namespace <% =Builder.DaoIntfNamespace %>
{
    /// <summary><c><% =Builder.DaoIntfName %></c> is the DAO interface for <see cref="<% =Builder.EntityQualifiedName %>"/>.</summary>
    public <% =Builder.DaoIntfPartialDecl %>interface <% =Builder.DaoIntfName %><% =Builder.DaoIntfBaseDecl %> {        

<%	//GetCount
	if (Builder.DaoMethodSetOption.GetCountOption.GenerateIntf) { %>
		/// <summary>Returns the total count of objects.</summary>
		int <% =Builder.GetCountMethod %>(IDictionary param);

<%	} %>
<%	//Find
	if (Builder.DaoMethodSetOption.FindOption.GenerateIntf) { %>
		/// <summary>Finds a <see cref="<% =Builder.EntityName %>"/> instance by the primary key value.</summary>
		<% =Builder.EntityName %> <% =Builder.FindMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>);
        
        IList<<% =Builder.EntityName %>> Select(IDictionary param);
        
        IList<<% =Builder.EntityName %>> SelectPager(IDictionary param, int start, int end);
        
<%	} //if %>
<%	//QuickFind
	if (Builder.HasLob && Builder.DaoMethodSetOption.FindNonLobOption.GenerateIntf) { %>
		/// <summary>Finds a <see cref="<% =Builder.EntityName %>"/> instance by the primary key value without Lob columns loaded.</summary>
		<% =Builder.EntityName %> <% =Builder.FindNonLobMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>);
		
<%	} //if %>
<%	//FindAll
	if (Builder.DaoMethodSetOption.FindAllOption.GenerateIntf) { %>
		/// <summary>Finds all <% =Builder.EntityName %> instances.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.FindAllMethod %>();
		
<%	} //if %>
<%	//QuickFindAll
	if (Builder.HasLob && Builder.DaoMethodSetOption.FindNonLobAllOption.GenerateIntf) { %>
		/// <summary>Finds all <% =Builder.EntityName %> instances without Lob columns loaded.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.FindNonLobAllMethod %>();
		
<%	} //if %>
<%	//FindBy, FindByNonLob
	foreach (ColumnInfo c in Builder.FinderColumns) { 
		//FindBy
		if (Builder.DaoMethodSetOption.FindByOption.GenerateIntf) { %>
		/// <summary>Finds <% =Builder.EntityName %> instances by <% =c.PropName %> value.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.FindByMethod(c) %>(<% =c.ClrParamDecl %>);
		
<%		} //if	%>
<%		//QuickFindBy
		if (Builder.HasLob && Builder.DaoMethodSetOption.FindNonLobByOption.GenerateIntf) { %>
		/// <summary>Finds <% =Builder.EntityName %> instances by <% =c.PropName %> value without Lob columns loaded.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.FindNonLobByMethod(c) %>(<% =c.ClrParamDecl %>);
		
<%		} //if
	} //foreach %>
<%	//Insert
	if (Builder.DaoMethodSetOption.InsertOption.GenerateIntf) { %>
		/// <summary>Inserts a new <% =Builder.EntityName %> instance into underlying database table.</summary>
		<% =Builder.PkColumns[0].ClrTypeDecl%> <% =Builder.InsertMethod %>(<% =Builder.EntityName %> obj);
		
<%	} //if %>
<%	//Update
	if (Builder.DaoMethodSetOption.UpdateOption.GenerateIntf) { %>
		/// <summary>Update the underlying database record of a <% =Builder.EntityName %> instance.</summary>
		int <% =Builder.UpdateMethod %>(<% =Builder.EntityName %> model);
		
<%	} //if %>
<%	//Delete
	if (Builder.DaoMethodSetOption.DeleteOption.GenerateIntf) { %>
		/// <summary>Delete the underlying database record of a <% =Builder.EntityName %> instance.</summary>
		int <% =Builder.DeleteMethod %>(<% =Builder.EntityName %> model);
		
<%	} //if %>
<%  //DeleteBy
	if (Builder.DaoMethodSetOption.DeleteByOption.GenerateIntf) { %>
<%		foreach (ColumnInfo c in Builder.FinderColumns) { %>
        /// <summary>Deletes <see cref="<% =Builder.EntityName %>"/> instances by <see cref="<% =Builder.EntityName + "." + c.PropName %>"/>.</summary>
		int <% =Builder.DeleteByMethod(c) %>(<% =c.ClrParamDecl %>);
		
<%		} //foreach %>
<%	} //if %>
	}

}
